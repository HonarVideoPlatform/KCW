<?xml version="1.0" encoding="utf-8"?>
<!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<importViews:ImportModule 
	styleName="uploadView"
	xmlns:importViews="com.kaltura.contributionWizard.view.importViews.*"
	verticalAlign="top" horizontalAlign="center"
	implements="com.kaltura.contributionWizard.view.importViews.IImportModule"
	creationComplete="onCreationComplete()"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:net="flash.net.*"
	xmlns:upload="com.kaltura.contributionWizard.view.importViews.upload.*"
	xmlns:controller="com.kaltura.contributionWizard.view.controller.*"
	xmlns:control="com.kaltura.contributionWizard.control.*" xmlns:ac="com.adobe.ac.*" xmlns:browser="com.kaltura.contributionWizard.view.importViews.browser.*">

	<mx:Script>
		<![CDATA[
			import mx.messaging.channels.StreamingAMFChannel;
			import com.kaltura.contributionWizard.vo.limitations.LimitationError;
			import com.kaltura.contributionWizard.view.importViews.browser.NavigationButtonsMode;
			import mx.events.CloseEvent;
			import mx.core.UIComponent;
			import com.kaltura.contributionWizard.vo.providers.MediaProviderVO;
			import com.kaltura.contributionWizard.model.UploadErrors;
			import mx.utils.ObjectUtil;
			import com.kaltura.contributionWizard.model.UploadModelLocator;
			import com.arc90.modular.CairngormEventDispatcherFactory;
			import com.kaltura.contributionWizard.model.ImportTypes;
			import com.kaltura.contributionWizard.view.resources.ResourceBundleNames;
			import mx.controls.Alert;
			import com.kaltura.contributionWizard.events.CancelUploadEvent;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			import com.kaltura.contributionWizard.model.importData.UploadCartStatusTypes;
			import mx.collections.ArrayCollection;
			import mx.effects.easing.Quadratic;
			import com.kaltura.contributionWizard.events.ImportEvent;
			import mx.controls.listClasses.IListItemRenderer;
			import com.kaltura.contributionWizard.view.events.ImportViewCompleteEvent;
			import com.kaltura.vo.importees.ImportFileVO;
			import com.adobe_cw.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.kaltura.contributionWizard.events.FileReferenceEvent;
			import com.kaltura.contributionWizard.view.importViews.IImportModule;
			import com.kaltura.contributionWizard.model.WizardModelLocator;

			[Bindable]
			private var _wizardModel:WizardModelLocator = WizardModelLocator.getInstance();

			[Bindable]
			private var _uploadModel:UploadModelLocator = UploadModelLocator.getInstance();

			[Bindable]
			private var _activeMediaProviderVo:MediaProviderVO;

			//private var _fileReferenceList:FileReferenceList;
			private var _fileReferenceList:EventDispatcher;

			private var _active:Boolean = false;
			
			[Bindable]
			private var _lastLimitationError:String;
			
			[Bindable]
			private var _headlineSuffix:String;
			[Bindable]
			private var _tipSuffix:String;
			
			public function getImportList():Array
			{
				return null;
			}

			//------------------ init ------------------
			public function onCreationComplete():void
			{
				//trace("uploader v3");
				setupFileReferenceList();
				
				var s:String = resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'TIP');
				trace(s);
			}

			private function setupFileReferenceList():void
			{
				var num:int = _wizardModel.limitationsVo.upload.numFiles.max;
				if(num && num == 1)
				{
					_fileReferenceList = new FileReference();
					_headlineSuffix = _tipSuffix = "SINGULAR";
				}
				else
				{
					_fileReferenceList = new FileReferenceList();
					_headlineSuffix = _tipSuffix = "PLURAL";
				}
				
				_fileReferenceList.addEventListener(Event.SELECT, onFilesSelection);
			}

			//------------------FileReference logic-----------------
			private function addFilesClickHandler(evtClick:MouseEvent):void
			{
				var num:int = _wizardModel.limitationsVo.upload.numFiles.max;
				if(num && num == 1)
				{
					(_fileReferenceList as FileReference).browse(_wizardModel.mediaProviders.activeMediaProvider.mediaInfo.allowedFileTypes);
					
				}
				else
				{
					(_fileReferenceList as FileReferenceList).browse(_wizardModel.mediaProviders.activeMediaProvider.mediaInfo.allowedFileTypes);
				}
			}

			private function onFilesSelection(evtSelect:Event):void
			{
				var className:String = getQualifiedClassName(evtSelect.target);
				className = className.substring(className.indexOf("::") + 2);
				var fileList:Array;
				if(className == "FileReference")
				{
					fileList = [evtSelect.target];					
				}
				else
				{
					fileList = (evtSelect.target as FileReferenceList).fileList;
				}
				dispatchFileAdd(fileList);
			}

			private function dispatchFileAdd(fileList:Array):void
			{
				var evtAddFiles:FileReferenceEvent = new FileReferenceEvent(FileReferenceEvent.FILES_ADD, fileList);
				CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(evtAddFiles);
			}

			public function removeItemHandler(evtRemove:Event):void
			{
				var importFileVO:ImportFileVO = IListItemRenderer(evtRemove.target).data as ImportFileVO;
				var confirmMsgBody:String = resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 	"REMOVE_FILE_ALERT_BODY", [importFileVO.polledfileReference.fileReference.name]);
				var confirmMsgTitle:String = resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 	"REMOVE_FILE_ALERT_TITLE");
				Alert.show(confirmMsgBody, confirmMsgTitle, Alert.YES | Alert.NO, null,
					function(alertCloseEvent:CloseEvent):void
					{
						var removeFile:Boolean = alertCloseEvent.detail == Alert.YES;
						if (removeFile)
						{
							var event:ImportEvent = new ImportEvent(ImportEvent.REMOVE_IMPORT_ITEM, importFileVO);
							event.dispatch();
						}
					}
				);

			}

			override public function activate():void
			{
				_active = true;

			}

			override public function mediaProviderChange(mediaProviderVo:MediaProviderVO):void
			{
				_activeMediaProviderVo = mediaProviderVo;
			}

			override public function deactivate():void
			{
				_active = false;
				uploadInfoTable.dataProvider = null;
			}

			[Bindable]
			override public function set importItems(value:ArrayCollection):void
			{
				super.importItems = value;
			}

			[Bindable("importItemsChange")]
			override public function get navigationButtonsMode():NavigationButtonsMode
			{
				return buttonsMode;
			}
			//------------------Navigation logic-----------------
				////-->Next step logic
			override public function goNextStep():void
			{
				//if (!_model.importData.importCart.isCartEmpty && !_model.importData.isUploadCompleted)
				if (_wizardModel.importData.importCart.uploadStatus == UploadCartStatusTypes.READY_TO_UPLOAD)
				{
					uploadFiles();
				}
				else if (_wizardModel.importData.importCart.uploadStatus == UploadCartStatusTypes.COMPLETE)
				{
					dispatchUploadViewComplete();
				}
			}

			private function uploadFiles():void
			{
				dispatchFileUpload();
				showUploadProgressWindow();
			}

			private function dispatchFileUpload():void
			{
				var evtUpload:FileReferenceEvent = new FileReferenceEvent(FileReferenceEvent.UPLOAD);
				CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(evtUpload);
			}

			private function showUploadProgressWindow():void
			{
				var currentImportFileVo:ImportFileVO = _wizardModel.importData.importCart.currentlyProcessedImportVo as ImportFileVO;
				PopUpManager.addPopUp(_uploadProgressWindow, this, true);
				PopUpManager.centerPopUp(_uploadProgressWindow);
			}

			private function dispatchUploadViewComplete():void
			{
				var evtComplete:ImportViewCompleteEvent = new ImportViewCompleteEvent(ImportViewCompleteEvent.IMPORT_VIEW_COMPLETE);
				dispatchEvent(evtComplete);
			}
			//------------------Formatting logic-----------------
			private function getFileSizeText(item:Object, column:DataGridColumn):String
			{
				var fileReference:FileReference = (item as ImportFileVO).polledfileReference.fileReference;
				try
				{
					var fileSizeKB:int = fileReference.size / 1024 ;
				}
				catch(e:Error)
				{

				}
				return fileSizeFormatter.format(fileSizeKB) + resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, "FILE_SIZE_UNIT");
			}

			private function getFileNameText(item:Object, column:DataGridColumn):String
			{
				var fileReference:FileReference = (item as ImportFileVO).polledfileReference.fileReference;
				return fileReference.name;
			}

			//-----------------End Formatting logic----------------

			private function cancelAllUploadsHandler():void
			{
				dispatchCancelAllUploads();
				PopUpManager.removePopUp(_uploadProgressWindow);
			}

			private function dispatchCancelAllUploads():void
			{
				var evtCancelUpload:CancelUploadEvent = new CancelUploadEvent(CancelUploadEvent.CANCEL_ALL_UPLOADS);
				CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(evtCancelUpload);
			}

			private function skipUploadHandler():void
			{
				var evtCancelUpload:CancelUploadEvent = new CancelUploadEvent(CancelUploadEvent.SKIP_CURRENT_UPLOAD);
				CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(evtCancelUpload);
			}

			private function getDataProvider(dataProvider:ArrayCollection):ArrayCollection
			{
				if (_active)
					return dataProvider;
				else
					return null;
			}

			private function addFilesErrorHandler(uploadAddFileError:String):void
			{
				if (!uploadAddFileError) return;
				var errorsTitle:String = resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, "ADD_FILE_ERRORS");
				var errorText:String = "";
				var maxFileSize:String = _uploadModel.maxFileSize.toString();
				//The first locales param is redundant, but if it's removed, the locales must be changed
				errorText = resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, uploadAddFileError, ["", maxFileSize]) + "\n";
				Alert.show(errorText, errorsTitle);
			}

			private function uploadStatusChangeHandler(uploadStatus:String):void
			{
				if (uploadStatus == UploadCartStatusTypes.COMPLETE)
				{
					if (_wizardModel.importTypesConfiguration.upload.singleClickUpload)
						dispatchUploadViewComplete();
					navigationButtonsMode.nextText = resourceManager.getString(ResourceBundleNames.IMPORT_BROWSER, 'NEXT');
				}
				else
				{
					navigationButtonsMode.nextText = resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'UPLOAD');
				}
			}
			
			/*public function set limitationError(value:*):void
			{
				var error:LimitationError = _wizardModel.limitationError;
				errorText.text = (error ? error.message : "error");
			}*/
			
			public function set lastLimitationError(value:LimitationError):void
			{
				var error:LimitationError = _wizardModel.limitationError;
				_lastLimitationError = (error ? error.message : "error");
			}
			
			public function get lastLimitationError():LimitationError
			{
				return _wizardModel.limitationError;
			}
		]]>
	</mx:Script>

	<browser:NavigationButtonsMode id="buttonsMode"
		nextExists="true"
		nextEnabled="{importItems.length > 0}"
		prevExists="true"
		prevEnabled="false"
		prevText="{resourceManager.getString(ResourceBundleNames.IMPORT_BROWSER, 'BACK')}"
		/>

	<control:UploadController />
	
	<!--ac:ObserveValue source="{_wizardModel.limitationIsValid}" value="{false}" handler="limitationError" /-->
	<mx:Binding source="{_wizardModel.limitationError}" destination="lastLimitationError" />
	
	<!-- invisible Component -->
	<mx:NumberFormatter id="fileSizeFormatter" precision="1" useThousandsSeparator="true" />

	<mx:WipeDown	id="wipeDown"	moveEasingFunction="{Quadratic.easeOut}" />
	<mx:WipeUp		id="wipeUp"		moveEasingFunction="{Quadratic.easeIn}" />

	<ac:Observe source="{_wizardModel.importData.importCart.uploadStatus}" handler="{uploadStatusChangeHandler}" />
	<ac:Observe source="{_uploadModel.addFileErrorType}" handler="{addFilesErrorHandler}" />
	<!--Progress popup window-->
	<mx:Canvas width="0" height="0">
		<upload:UploadProgressWindow id="_uploadProgressWindow"
			cancelAllUploads="cancelAllUploadsHandler()"
			skipUpload="skipUploadHandler()" />
	</mx:Canvas>

	<!-- Visible Component -->

	<mx:VBox horizontalAlign="left" width="100%">
		<mx:Label
			styleName="uploadHeadline"
			text="{resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'HEADLINE',
											[resourceManager.getString
												(
													ResourceBundleNames.MEDIA_TYPES,
													_wizardModel.mediaProviders.activeMediaProvider.mediaInfo.mediaType.toUpperCase() + '_INLINE_' + _headlineSuffix
												)
											]
											)
				  }"
			 />

		<mx:HBox verticalAlign="top">
			<mx:Button
				label="{resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'BROWSE_LABEL',
					[resourceManager.getString(ResourceBundleNames.MEDIA_TYPES, _wizardModel.mediaProviders.activeMediaProvider.mediaInfo.mediaType.toUpperCase() + '_INLINE_PLURAL')]
					)}"
				click="addFilesClickHandler(event)" buttonMode="true" styleName="greenButton" 
				enabled="{_wizardModel.limitationIsValid || _wizardModel.limitationMinimumIsValid}"
				/>	<!-- don't disable when there is a minimum error -->
			<mx:Text htmlText="{resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'TIP_' + _tipSuffix)}"
				styleName="uploadSubHeadline" selectable="false" paddingTop="4" 
				visible="{!Boolean(_wizardModel.importData.importCart.importItemsArray.length)}"/>
				
			<!--mx:Text styleName="uploadSubHeadline" selectable="false"
				htmlText="If you have aFlip or other camcoder connected to your &lt;br /&gt;computer, transfer the media to your computer then browse &lt;br /&gt;for it and upload." /-->
			<!--mx:Label
				text="{resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'TIP')}"
				styleName="uploadSubHeadline" / -->
		</mx:HBox>
		
		<mx:Text id="errorText" width="{uploadInfoTable.width - 10}"
			visible="{!_wizardModel.limitationIsValid}"
			includeInLayout="{!_wizardModel.limitationIsValid}"
			text="{_lastLimitationError}" 
			selectable="false"
			styleName="uploadErrorText" />
	</mx:VBox>
	<mx:DataGrid id="uploadInfoTable"
		selectable="false"
		sortableColumns="false"	draggableColumns="false"
		verticalGridLines="false"
		headerSeparatorSkin="{UIComponent}"
		dataProvider="{getDataProvider(_wizardModel.importData.importCart.importItemsArray)}"
		visible="{uploadInfoTable.dataProvider.length > 0}"
		showEffect="wipeDown"
		hideEffect="wipeUp"
		width="100%" height="100%"
		>
		<mx:columns>
			<mx:DataGridColumn paddingLeft="0" headerText="{resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'UPLOAD_STATUS_HEADER')}">
				<mx:itemRenderer>
					<mx:Component>
						<upload:UploadStatusRenderer/>
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>

			<mx:DataGridColumn id="fileNameColumn"
				headerText="{resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'FILE_NAME_HEADER')}"
				textAlign="left" labelFunction="getFileNameText" />

			<mx:DataGridColumn id="sizeColumn"
				headerText="{resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'SIZE_HEADER')}"
				labelFunction="getFileSizeText" textAlign="left" width="80"/>

			<mx:DataGridColumn
				headerText="{resourceManager.getString(ResourceBundleNames.UPLOAD_IMPORT_VIEW, 'REMOVE_HEADER')}"
				textAlign="center" width="60">
				<mx:itemRenderer>
					<mx:Component>
						<upload:RemoveItemRenderer removeItem="outerDocument.removeItemHandler(event)" />
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
</importViews:ImportModule>