<?xml version="1.0" encoding="utf-8"?>
<!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<mx:Canvas backgroundColor="0x000000"
	click="trace(_video)"
	creationComplete="thisCreationCompleteHandler()"
	xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.controls.SWFLoader;

			private static const VIDEO_SCALE_X:int = 3;
			private static const VIDEO_SCALE_Y:int = 2;

			[Bindable]
			public var viewTimer:Timer;
			
			/**
			 * time (ms) since viewTimer started ticking
			 * (read: since actual recording started)
			 * */
			public var elapsedTime:uint;


			public static const PLAYING:String 		= "playing";
			public static const RECORDING:String 	= "recording";
			public static const STOP:String 		= "stop";

			public function set videoStatus(status:String):void
			{
				switch (status)
				{
					case PLAYING:
						currentState = "playState";
					break;

					case RECORDING:
						currentState = "recordState";
					break;

					case STOP:
						currentState = "";
					break;
				}
			}

			/* public function set videoTime(value:int):void
			{
				trace("videoTime: ", value)
			} */

			public function dispose():void
			{

			}
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				if (elapsedTimeContainer)
				{
					elapsedTimeContainer.x = _video.x + 5;
					elapsedTimeContainer.y = _video.y + 5;
				}
			}
			private function thisCreationCompleteHandler():void
			{
				this.addEventListener(Event.ENTER_FRAME, thisEnterFrameHandler);
			}

			public function set video(video:Video):void
			{
				_video = video;
			}

			[Bindable]
			private var _video:Video;

			override protected function commitProperties():void
			{
				super.commitProperties();
				_video.width = swfLoader.width;
				_video.height = swfLoader.height;
			}


			private function thisEnterFrameHandler(evtEnterFrame:Event):void
			{
				elapsedTime = viewTimer.currentCount * 1000 || 100;
				var date:Date = new Date(0,0,0,0,0,0,elapsedTime);
				var timeText:String = timeFormatter.format(date);
				if (elapsedTimeLabel) elapsedTimeLabel.text = timeText;
			}


		]]>
	</mx:Script>

	<mx:DateFormatter id="timeFormatter" formatString="JJ:NN:SS" />


	<mx:states>
		<mx:State name="timeDisplayState">
			<mx:AddChild position="lastChild">
				
				<mx:HBox id="elapsedTimeContainer">
					<mx:Label id="elapsedTimeLabel" styleName="webcamRecordTime" />
				</mx:HBox>
			</mx:AddChild>
		</mx:State>

		<mx:State name="recordState" basedOn="timeDisplayState">
			<mx:SetProperty target="{elapsedTimeContainer}" name="styleName" value="webcamElapsedTimeBoxRecord" />
		</mx:State>

		<mx:State name="playState" basedOn="timeDisplayState">
			<mx:SetProperty target="{elapsedTimeContainer}" name="styleName" value="webcamElapsedTimeBoxPlay" />
		</mx:State>
	</mx:states>

	<mx:SWFLoader id="swfLoader" width="100%" height="100%" source="{_video}" maintainAspectRatio="true" horizontalAlign="center" verticalAlign="middle" />

</mx:Canvas>
