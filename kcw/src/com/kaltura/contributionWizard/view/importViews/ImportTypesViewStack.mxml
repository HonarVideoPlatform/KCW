<?xml version="1.0" encoding="utf-8"?>
<!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<mx:ViewStack
	implements="com.kaltura.contributionWizard.view.importViews.IImportStep, com.kaltura.utils.IDisposable"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:util="com.kaltura.contributionWizard.util.*"
	xmlns:upload="com.kaltura.contributionWizard.view.importViews.upload.*"
	xmlns:search="com.kaltura.contributionWizard.view.importViews.search.*"
	xmlns:ac="com.adobe.ac.*">

	<mx:Metadata>
		[Event(name="importViewComplete", type="com.kaltura.contributionWizard.view.events.KCWViewEvent")]
	</mx:Metadata>
	<mx:preinitialize>
		<![CDATA[
			addEventListener(ImportViewCompleteEvent.IMPORT_VIEW_COMPLETE, importViewCompleteHandler);
		]]>
	</mx:preinitialize>
	<mx:Script>
		<![CDATA[
			import com.kaltura.contributionWizard.view.resources.ResourceBundleNames;
			import com.kaltura.contributionWizard.view.importViews.browser.NavigationButtonsMode;
			import com.kaltura.contributionWizard.view.events.ImportViewCompleteEvent;
			import com.kaltura.contributionWizard.view.events.KCWViewEvent;
			import com.kaltura.contributionWizard.vo.providers.MediaProviderVO;
			import mx.modules.ModuleManager;
			import flash.utils.setTimeout;
			import com.kaltura.utils.IDisposable;
			import mx.binding.utils.BindingUtils;
			//selectedChild="{getSelectedView(_model.mediaProviders.activeMediaProvider.importTypeVo.name)}"
			import mx.events.ModuleEvent;
			import mx.modules.ModuleLoader;
			import mx.controls.Alert;
			import com.kaltura.contributionWizard.model.ImportTypes;
			import com.adobe_cw.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.kaltura.contributionWizard.events.ImportEvent;
			import mx.core.UIComponent;
			import mx.core.Container;
			import mx.collections.ArrayCollection;
			import com.kaltura.contributionWizard.model.WizardModelLocator;
			import com.adobe_cw.adobe.cairngorm.model.ModelLocator;
			import mx.events.PropertyChangeEvent;
			import mx.binding.utils.ChangeWatcher;

			[Bindable]
			private var _model:WizardModelLocator = WizardModelLocator.getInstance();

			private var _modulesMap:Dictionary = new Dictionary(true);

			[Bindable]
			private var _selectedImportView:ImportModuleLoader;

			[Bindable]
			private var _activeMediaProviderVo:MediaProviderVO;

			[Bindable]
			private var _navigationButtonsMode:NavigationButtonsMode;

			public function goNextStep():void
			{
				_selectedImportView.goNextStep();
			}

			public function goPrevStep():void
			{
				_selectedImportView.goPrevStep();
			}

			public function dispose():void
			{
				if (_selectedImportView)
				{
					_selectedImportView.dispose();
				}

			}

			public function set activeMediaProviderVo(newActiveMediaProviderVo:MediaProviderVO):void
			{
				//var importModuleChanged:Boolean = _activeMediaProviderVo.importTypeVo.moduleUrl != activeMediaProviderVo.importTypeVo.moduleUrl;
				var oldModuleUrl:String = _activeMediaProviderVo ? _activeMediaProviderVo.moduleUrl : null;

				if (oldModuleUrl != newActiveMediaProviderVo.moduleUrl) //if the selected media provider has different import view
				{
					if (_selectedImportView) _selectedImportView.deactivate();
					selectViewByUrl(newActiveMediaProviderVo.moduleUrl);
				}

				_selectedImportView.mediaProviderChange(newActiveMediaProviderVo);
				_activeMediaProviderVo = newActiveMediaProviderVo;
			}
			public function get activeMediaProviderVo():MediaProviderVO
			{
				return _activeMediaProviderVo;
			}

			[Bindable]
			public function set navigationButtonsMode(value:NavigationButtonsMode):void
			{
				_navigationButtonsMode = value;
			}
			public function get navigationButtonsMode():NavigationButtonsMode
			{
				var nv:NavigationButtonsMode = new NavigationButtonsMode();
				nv.nextEnabled = false;
				nv.nextExists = true;
				nv.nextText = resourceManager.getString(ResourceBundleNames.IMPORT_BROWSER, "NEXT");
				nv.prevEnabled = true;
				nv.prevExists = false;

				return _navigationButtonsMode || nv;
			}

			public function deactivate():void
			{
				_selectedImportView.deactivate();
			}
			private function selectViewByUrl(url:String):void
			{
				_selectedImportView = _modulesMap[url];

				if (!_selectedImportView)
				{
					_selectedImportView = createNewImportView(url);
				}

				//_selectedImportView.activeMediaProvider = _model.mediaProviders.activeMediaProvider;
				_selectedImportView.activate();
				selectedChild = _selectedImportView;
			}

			private function createNewImportView(url:String):ImportModuleLoader
			{
				var importModuleLoader:ImportModuleLoader = new ImportModuleLoader();
				importModuleLoader.styleName = "importView";
				importModuleLoader.percentWidth = 100;
				importModuleLoader.percentHeight = 100;
				importModuleLoader.applicationDomain = new ApplicationDomain(ApplicationDomain.currentDomain);
				importModuleLoader.url = url;
				_modulesMap[url] = importModuleLoader;
				this.addChild(importModuleLoader);
				return importModuleLoader;
			}

			private function activeMediaProviderChangeHandler(activeMediaProviderVo:MediaProviderVO):void
			{
				if (_selectedImportView)
					_selectedImportView.mediaProviderChange(activeMediaProviderVo);
			}

			private function importViewCompleteHandler(event:ImportViewCompleteEvent):void
			{
				if (event.target != this)
				{
					event.stopPropagation();
					dispatchEvent(event.clone());
				}
			}

		]]>
	</mx:Script>
	<mx:Binding destination="navigationButtonsMode" source="_selectedImportView.navigationButtonsMode" />
</mx:ViewStack>