<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" verticalAlign="bottom" horizontalGap="0" xmlns:controls="com.kaltura.controls.*">
	<mx:Metadata>
		[Event(name="selectMediaType", type="com.kaltura.contributionWizard.view.events.SelectMediaTypeViewEvent")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			import com.kaltura.resources.ResourceModifiers;
			import com.kaltura.resources.ResourcesUtils;
			import com.kaltura.events.ItemSelectionEvent;
			import mx.collections.ArrayCollection;
			import mx.events.ItemClickEvent;
			import com.kaltura.contributionWizard.view.resources.ResourceBundleNames;
			import com.kaltura.utils.KArrayUtil;
			import com.kaltura.contributionWizard.view.events.SelectMediaTypeViewEvent;

			//list of { mediaType : "['video', 'audio' or 'image']" } objects. exists because the TabBar doesn't use the labelFucntion if the dataProvider contains string objects - ['a', b', 'c']
			[Bindable]
			private var _mediaTypesObjects:Array;

			private var _mediaTypesStrings:Array;

			public function set allMediaTypes(value:Array):void
			{
				_mediaTypesStrings = value;
				_mediaTypesObjects = _mediaTypesStrings.map(
												function(element:String, index:int, arr:Array):Object
												{
													return {mediaType:element};
												} );
			}
			public function set currentMediaType(value:String):void
			{
				tabs.selectedIndex = _mediaTypesStrings.indexOf(value);
			}

			public function mediaTypeLabelFunction(item:Object):String
			{
				var mediaType:String = item.mediaType.toUpperCase();
				var modifiers:Array = [ResourceModifiers.LEAD_SINGULAR, ResourceModifiers.LEAD_PLURAL, ResourceModifiers.INLINE_SINGULAR, ResourceModifiers.INLINE_PLURAL];
				var params:Array =  ResourcesUtils.getMultipleString(ResourceBundleNames.MEDIA_TYPES, mediaType, '_', modifiers );
				var localizedMediaType:String = resourceManager.getString( ResourceBundleNames.IMPORT_BROWSER, "MEDIA_TYPE_TAB", params);
				return localizedMediaType;
			}

			override public function styleChanged(styleProp:String):void
			{
				super.styleChanged(styleProp);
				if (_mediaTypesObjects)
					setIcons();
				//var c:CSSStyleDeclaration = StyleManager.getStyleDeclaration(".roundTabBar");
				//var o:Object = c.getStyle("imagesIcon");
			}

			private function setIcons():void
			{
				_mediaTypesObjects.forEach(
					function(item:Object, i:int, mediaTypesObjects:Array):void
					{
						var stylePropName:String = mediaTypesObjects[i].mediaType + "Icon";
						var cssDeclaration:CSSStyleDeclaration = StyleManager.getStyleDeclaration("MediaTypesTabs")
						if (cssDeclaration) //on old styles the "MediaTypesTabs" type selectorisn't defined
							var icon:Object = cssDeclaration.getStyle(stylePropName);
						item.icon = icon;
					}
				)
			}

			private function itemPreSelectionHandler(itemPreSelection:ItemSelectionEvent):void
			{
				itemPreSelection.preventDefault();
				var mediaType:String = String(itemPreSelection.item.mediaType);
				selectMediaType(mediaType);
			}

			private function selectMediaType(mediaType:String):void
			{
				var event:SelectMediaTypeViewEvent = new SelectMediaTypeViewEvent(SelectMediaTypeViewEvent.SELECT_MEDIA_TYPE, mediaType);
				dispatchEvent(event);
			}
		]]>
	</mx:Script>
	<!--Visible content-->

	<controls:TabBarPreventable id="tabs"
		styleName="roundTabBar"
		itemPreSelection="itemPreSelectionHandler(event)"
		labelFunction="mediaTypeLabelFunction"
		dataProvider="{_mediaTypesObjects}" />

	<!--
	<mx:Text fontSize="12" fontWeight="bold" text="{resourceManager.getString(ResourceBundleNames.IMPORT_BROWSER, 'OTHER_MEDIA_TYPES_START')}" />

	<mx:Repeater id="mediaTypeRepeater" dataProvider="{ArrayHelpers.subtract(allMediaTypes.source, [currentMediaType])}">
		<mx:HBox verticalAlign="middle" horizontalGap="0">
			<mx:LinkButton
				horizontalGap="0" verticalGap="0"
				paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" styleName="link"
				label="{resourceManager.getString( ResourceBundleNames.MEDIA_TYPES, mediaTypeRepeater.currentItem.toUpperCase() )}"
				data="{mediaTypeRepeater.currentItem}"
				click="mediaLinkClickHandler(event.target.data)" />
		</mx:HBox>
	</mx:Repeater>

	<mx:Text fontSize="12" fontWeight="bold" text="{resourceManager.getString(ResourceBundleNames.IMPORT_BROWSER, 'OTHER_MEDIA_TYPES_END')}" />
	-->

</mx:HBox>
