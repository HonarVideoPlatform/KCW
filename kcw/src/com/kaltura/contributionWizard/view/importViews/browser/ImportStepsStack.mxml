<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack
	selectedIndex="{getSelectedIndex(_importStep)}"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:importViews="com.kaltura.contributionWizard.view.importViews.*"
	xmlns:tagging="com.kaltura.contributionWizard.view.tagging.*"
	xmlns:finishScreen="com.kaltura.contributionWizard.view.importViews.finishScreen.*">

	<mx:preinitialize>
		<![CDATA[
			addEventListener(ImportViewCompleteEvent.IMPORT_VIEW_COMPLETE, importViewCompleteHandler);
		]]>
	</mx:preinitialize>

	<mx:Script>
		<![CDATA[
			import com.kaltura.contributionWizard.events.AddSearchEntriesEvent;
			import com.kaltura.contributionWizard.events.GotoNextImportStepEvent;
			import com.kaltura.contributionWizard.view.events.ImportViewCompleteEvent;
			import mx.states.SetEventHandler;
			import mx.binding.utils.BindingUtils;
			import mx.core.Container;
			import com.kaltura.contributionWizard.view.importViews.IImportStep;
			import com.kaltura.contributionWizard.enums.KCWWorkflowState;
			import mx.core.Application;
			import mx.controls.Alert;
			import com.kaltura.contributionWizard.events.WorkflowEvent;
			import com.kaltura.contributionWizard.view.importViews.alerts.TermsOfUseScreen;
			import com.kaltura.contributionWizard.events.GotoScreenEvent;
			import com.kaltura.contributionWizard.events.AddEntriesEvent;
			import mx.managers.PopUpManager;
			import com.kaltura.contributionWizard.view.events.TermsOfUseEvent;
			import com.kaltura.contributionWizard.events.CloseWizardEvent;
			import com.kaltura.contributionWizard.view.events.KCWViewEvent;
			import com.kaltura.contributionWizard.model.WizardModelLocator;

			[Bindable]
			private var _model:WizardModelLocator = WizardModelLocator.getInstance();

			[Bindable]
			private var _importStep:IImportStep;

			public function set workflowState(value:String):void
			{
				selectChildByWorkflowState(value);
			}
			[Bindable]
			public var navigationButtonsMode:NavigationButtonsMode;

			private function selectChildByWorkflowState(workflowState:*):void
			{
				switch (workflowState)
				{
					case KCWWorkflowState.IMPORT_MEDIA:
						_importStep = importTypesView;
					break;

					case KCWWorkflowState.TAGGING:
						_importStep = taggingView;
					break;

					case KCWWorkflowState.FINISH_SCREEN:
						_importStep = finishScreen;
					break;
				}
			}

			private function getSelectedIndex(importStep:IImportStep):int
			{
				return _importStep ?
					getChildIndex(Container(_importStep)) :
					-1;
			}
			public function goNextStep():void
			{
				_importStep.goNextStep();
			}

			public function goPrevStep():void
			{
				_importStep.goPrevStep();
			}
			public function dispose():void
			{
				Alert.show("Implement me?");
			}
			private function addMoreHandler():void
			{
				var gotoScreenEvent:GotoScreenEvent = new GotoScreenEvent(GotoScreenEvent.GOTO_SCREEN, null);
				gotoScreenEvent.dispatch();
			}

			private function finishContributionHandler():void
			{
				var event:CloseWizardEvent = new CloseWizardEvent(CloseWizardEvent.CLOSE_WIZARD);
				event.dispatch();
			}

			private function importViewCompleteHandler(event:ImportViewCompleteEvent):void
			{	
				var gotoNextImportStepEvent:GotoNextImportStepEvent = new GotoNextImportStepEvent(GotoNextImportStepEvent.GOTO_NEXT_IMPORT_STEP, event.backward);
				gotoNextImportStepEvent.dispatch();

				/* if (event.backward)
				{
					if (event.target == finishScreen)
					{
						changeWorkflow(KCWWorkflowState.TAGGING);
					}
					else if (event.target == taggingView)
					{
						changeWorkflow(KCWWorkflowState.IMPORT_MEDIA);
					}

				}
				else
				{
					if (event.target == importTypesView)
					{
						changeWorkflow(KCWWorkflowState.TAGGING);
					}
					else if (event.target == taggingView)
					{
						changeWorkflow(KCWWorkflowState.FINISH_SCREEN);
					}
				} */

			}

			private function changeWorkflow(state:String):void
			{
				var changeWorkflowEvent:WorkflowEvent = new WorkflowEvent(WorkflowEvent.CHANGE_WORKFLOW, state);
				changeWorkflowEvent.dispatch();

				//currentState = "taggingState";
			}


			private function validateTermsOfUse():void
			{
				if (_model.userCertified || !_model.startupDefaults.enableTOU)
				{
					dispatchAddEntries();
				}
				else
				{
					askUserConfirmation();
				}
			}

			private function askUserConfirmation():void
			{
				var certificationScreen:TermsOfUseScreen = new TermsOfUseScreen();
				certificationScreen.isAnonUser = _model.context.isAnonymous;
				PopUpManager.addPopUp(certificationScreen, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(certificationScreen);
				certificationScreen.setFocus(); //avoids any user interaction through keys with the disabled background
				certificationScreen.addEventListener(TermsOfUseEvent.USER_CERTIFIED, onUserCertified);
			}
			private function onUserCertified(evtUserCertified:TermsOfUseEvent):void
			{
				//taggingView.saveMetadata(); //synchronous
				dispatchAddEntries();
			}

			private function dispatchAddEntries():void
			{
				/*var addSearch:Boolean = _model.mediaProviders.activeMediaProvider.addSearchResult;
				if(addSearch)
				{
					trace("add js entries");
					var evtAddSearchEntries:AddSearchEntriesEvent = new AddSearchEntriesEvent(AddSearchEntriesEvent.ADD_SEARCH_ENTRIES);
					evtAddSearchEntries.dispatch();
				}*/

				var evtAddEntries:AddEntriesEvent = new AddEntriesEvent(AddEntriesEvent.ADD_ENTRIES);
				evtAddEntries.dispatch();
				//importTypesView.deactivate();
			}
		]]>
	</mx:Script>

	<mx:Binding
		destination="navigationButtonsMode"
		source="_importStep.navigationButtonsMode" />

	<importViews:ImportTypesViewStack id="importTypesView"
		styleName="importStepScreen"
		width="100%" height="100%"
		activeMediaProviderVo="{_model.mediaProviders.activeMediaProvider}" />

	<tagging:TaggingView id="taggingView" styleName="importStepScreen"
		width="100%" height="100%"
		taggingConfig="{_model.importTypesConfiguration.tagging}" />

	<finishScreen:FinishScreen id="finishScreen"
		width="100%" height="100%"
		styleName="importStepScreen"
		addMore="addMoreHandler()"
		finishContribution="finishContributionHandler()" />

</mx:ViewStack>