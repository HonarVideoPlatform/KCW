<?xml version="1.0" encoding="utf-8"?>
<!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<mx:ViewStack
	creationComplete="init()"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:tile="com.kaltura.contributionWizard.view.importViews.search.searchResultsView.tile.*"
	xmlns:visualMedia="com.kaltura.contributionWizard.view.importViews.search.searchResultsView.visualMedia.*"
	xmlns:audio="com.kaltura.contributionWizard.view.importViews.search.searchResultsView.audio.*" xmlns:ac="com.adobe.ac.*">
	<mx:Script>
		<![CDATA[
			import mx.controls.SWFLoader;
			import mx.rpc.events.ResultEvent;
			import com.kaltura.contributionWizard.view.resources.ResourceBundleNames;
			import com.arc90.modular.CairngormEventDispatcherFactory;
			import mx.controls.listClasses.ListBase;
			import mx.collections.IList;
			import mx.core.Container;
			import com.kaltura.contributionWizard.model.MediaTypes;
			import com.kaltura.contributionWizard.model.WizardModelLocator;
			import com.kaltura.vo.importees.ImportURLVO;
			import com.kaltura.contributionWizard.events.ImportEvent;
			import com.adobe_cw.adobe.cairngorm.control.CairngormEventDispatcher;

			[Bindable]
			private var _model:WizardModelLocator = WizardModelLocator.getInstance();

			private function init():void
			{
				this.addEventListener("select", onItemSelect);
				this.addEventListener("deselect", onItemDeselect);
				this.selectedChild = getSelectedChild();
			}
			public function set dataProvider(value:Object):void
			{
				if (_model.mediaProviders.activeMediaProvider.mediaInfo.mediaType == MediaTypes.AUDIO)
					audioSearchResults.dataProvider = value;
				else
					visualMediaResults.dataProvider = value;

				var selectedResultsView:Object = getSelectedChild().getChildAt(0);
			}

			public function deactivate():void
			{
				if (audioSearchResults) audioSearchResults.deactivate();
			}

			public function onItemSelect(evtSelect:Event):void
			{
				var importItemVO:ImportURLVO = evtSelect.target.data as ImportURLVO;
				var evtAddItems:ImportEvent = new ImportEvent(ImportEvent.ADD_IMPORT_ITEM, importItemVO);
				CairngormEventDispatcher.getInstance().dispatchEvent(evtAddItems);
			}

			public function onItemDeselect(evtDeselect:Event):void
			{
				var importItemVO:ImportURLVO = evtDeselect.target.data as ImportURLVO;
				var evtRemoveItems:ImportEvent = new ImportEvent(ImportEvent.REMOVE_IMPORT_ITEM, importItemVO);
				CairngormEventDispatcher.getInstance().dispatchEvent(evtRemoveItems);
			}

			private function onMediaTypeChange(mediaType:String):void
			{
				if (!mediaType) return;
				var mediaType:String = _model.mediaProviders.activeMediaProvider.mediaInfo.mediaType;
				var selectedChild:Container = getSelectedChild();
				if (!selectedChild) return;
				this.selectedChild = selectedChild;
			}

			private function getSelectedChild():Container
			{
				if (!_model.searchData.searchResults.resultsFound) return notFoundScreen;

				var mediaType:String = _model.mediaProviders.activeMediaProvider.mediaInfo.mediaType;
				switch (mediaType)
				{
					case MediaTypes.IMAGE:
					case MediaTypes.VIDEO:
						return visualMediaResultsContainer;
					break;

					case MediaTypes.AUDIO:
						return audioMediaResultsContainer;
					break;

				}

				return null;
			}

			private function resultFoundChangeHandler(resultsFound:Boolean):void
			{
				var selectedChild:Container = getSelectedChild();
				if (selectedChild)
					this.selectedChild = selectedChild;
			}
		]]>
	</mx:Script>


	<!--None visible components-->
	<mx:Fade id="fadeEffect" alphaFrom="0" duration="300" />

	<ac:Observe source="{_model.mediaProviders.activeMediaProvider.mediaInfo.mediaType}"
			handler="{onMediaTypeChange}" />

	<ac:Observe source="{_model.searchData.searchResults.resultsFound}" handler="{resultFoundChangeHandler}" />

	<!--Visible components-->
	<mx:Canvas width="100%" height="100%" id="visualMediaResultsContainer">
		<visualMedia:SearchResultsTileList id="visualMediaResults"
			mediaType="{_model.mediaProviders.activeMediaProvider.mediaInfo.mediaType}"
			width="100%" height="100%" columnCount="5" rowCount="2"/>
	</mx:Canvas>

	<mx:Canvas width="100%" height="100%" id="audioMediaResultsContainer">
		<audio:AudioSearchResults id="audioSearchResults" width="100%" height="100%" />
	</mx:Canvas>

	<mx:Canvas width="100%" height="100%" id="notFoundScreen" showEffect="fadeEffect">
		<mx:Text id="notFoundText"
			width="100%"
			text="{resourceManager.getString(ResourceBundleNames.SEARCH_IMPORT_VIEW, 'NO_SEARCH_RESULTS', [_model.searchData.searchTerms] )}"
			selectable="false" styleName="mainSearchViewNotFoundText" />
	</mx:Canvas>

</mx:ViewStack>
