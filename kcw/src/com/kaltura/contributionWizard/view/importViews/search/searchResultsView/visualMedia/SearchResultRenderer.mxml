<?xml version="1.0" encoding="utf-8"?>
<!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" buttonMode="true"
	toolTip="{_importUrlVo.metaData.description ? _importUrlVo.metaData.description : _importUrlVo.metaData.title}"
	paddingLeft="5" paddingTop="1"
	xmlns:searchResultsView="com.kaltura.contributionWizard.view.importViews.search.searchResultsView.*"
	xmlns:visualMedia="com.kaltura.contributionWizard.view.importViews.search.searchResultsView.visualMedia.*" xmlns:ac="com.adobe.ac.*">

	<mx:Metadata>
		[Event(name="select", 		type="flash.events.Event")]
		[Event(name="deselect", 	type="flash.events.Event")]
		[Event(name="playVideo", 	type="flash.events.Event")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.effects.easing.Quadratic;
			import com.kaltura.contributionWizard.model.MediaTypes;
			import com.kaltura.vo.importees.ImportURLVO;

			public function set mediaType(value:String):void
			{
				if (value == MediaTypes.VIDEO && _importUrlVo.flashPlaybackType != "none")
				{
					currentState = "videoPreviewState";
				}
				else
				{
					currentState = "";
				}
			}

			[Bindable]
			private var _importUrlVo:ImportURLVO;
			private var _isSelected:Boolean = false;

			public override function set data(value:Object):void
			{
				_importUrlVo = value as ImportURLVO;
				if (!value) return;

				setSelected(_importUrlVo.state.isSelected, false);
				setToolTip();
				_isSelected = _importUrlVo.state.isSelected;
				super.data = value;

				if (_importUrlVo.flashPlaybackType == "none")
					currentState = "";
			}

			public function setSelected(selected:Boolean, userInteraction:Boolean):void
			{
				if (selected)
				{
					//apply effect only if the selectioln is really different than the current state
					if (selected != _isSelected) onThumbSelectedEffect();
					if (userInteraction) dispatchSelected();
				}
				else
				{
					if (selected != _isSelected)
					{
						onThumbDeselectEffect();
						if (userInteraction) dispatchDeselect();
					}
				}
				_isSelected = selected;

			}

			private function onThumbSelectedEffect():void
			{
				selectionIndicator.selected = true
				frame.styleName = "searchRendererFrameDown";
			}

			private function onThumbDeselectEffect():void
			{
				if (!selectionIndicator) return;
				selectionIndicator.selected = false;
				frame.styleName = "searchRendererFrameUp";
			}


			private function dispatchSelected():void
			{
				dispatchEvent(new Event(Event.SELECT, true));
			}

			private function dispatchDeselect():void
			{
				dispatchEvent(new Event("deselect", true));
			}

			private function thumbMouseClickHandler(evtClick:MouseEvent):void
			{
				setSelected(!_isSelected, true);
			}

			private function onProgrammaticSelection(isSelected:Boolean):void
			{
				setSelected(isSelected, false);
			}

			private function setToolTip():void
			{
				this.toolTip = _importUrlVo.metaData.description || _importUrlVo.metaData.title || _importUrlVo.metaData.tags || "";
			}

			private function playButtonClickHandler(evtClick:MouseEvent):void
			{
				evtClick.stopPropagation();
				var evtPlayVideo:Event = new Event("playVideo");
				dispatchEvent(evtPlayVideo);
			}
		]]>
	</mx:Script>

	<ac:Observe source="{_importUrlVo.state.isSelected}" handler="{onProgrammaticSelection}" />

	<mx:Fade id="fadeIn" alphaFrom="0" />

	<mx:Zoom id="zoomIn" zoomWidthTo="1.5" zoomHeightTo="1.5" duration="80" easingFunction="{Quadratic.easeOut}" />
	<mx:Zoom id="zoomOut" zoomWidthTo="1" zoomHeightTo="1" duration="80" easingFunction="{Quadratic.easeOut}" />

	<mx:states>
		<mx:State name="videoPreviewState">
			<mx:SetEventHandler target="{this}" name="rollOver" handler="{previewButton.visible = true}" />
			<mx:SetEventHandler target="{this}" name="rollOut" handler="{previewButton.visible = false}" />

			<mx:AddChild relativeTo="{controlsPanel}" position="firstChild">
				<mx:VBox horizontalAlign="center" verticalAlign="middle" width="30" height="30">
					<mx:Button id="previewButton"
						width="15" height="15"
						visible="false"
						click="playButtonClickHandler(event)"
						styleName="searchResultsThumbsPlayButton"
						rollOverEffect="zoomIn"
						rollOutEffect="zoomOut"/>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
	</mx:states>

	<!--visual components-->
	<mx:Canvas id="frame" width="100%" height="100%" styleName="searchRendererFrameUp"
		click="thumbMouseClickHandler(event)">
		<mx:VBox
			left="0" right="0" bottom="0" top="0"
			horizontalAlign="center" verticalScrollPolicy="off" horizontalScrollPolicy="off"
			>
			<mx:Image id="thumb"
				completeEffect="fadeIn"
				source="{_importUrlVo.thumbURL}" scaleContent="true"
				maintainAspectRatio="true" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" />

		</mx:VBox>

		<mx:HBox id="controlsPanel"
			bottom="0" right="0" left="0"
			paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"
			verticalAlign="middle" horizontalGap="0">


			<mx:Spacer width="100%" />
			<mx:VBox id="selectionIndicatorContainer"  width="30" height="30"
				horizontalAlign="center" verticalAlign="middle">
				<visualMedia:SelectionIndicator id="selectionIndicator" width="20" height="20" />
			</mx:VBox>
		</mx:HBox>

	</mx:Canvas>

</mx:Box>