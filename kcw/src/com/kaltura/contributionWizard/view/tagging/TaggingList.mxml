<?xml version="1.0" encoding="utf-8"?><!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<mx:List
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:tagging="com.kaltura.contributionWizard.view.tagging.*">

	<mx:Script>
		<![CDATA[
			import com.kaltura.vo.KalturaCategory;
			import com.kaltura.contributionWizard.events.ValidateAllMetaDataEvent;
			import com.kaltura.contributionWizard.events.ValidateMetaDataEvent;
			import mx.utils.StringUtil;
			import mx.events.FlexEvent;
			import mx.collections.ArrayCollection;
			import com.kaltura.contributionWizard.view.events.TaggingViewEvent;
			import mx.validators.ValidationResult;
			import mx.events.ValidationResultEvent;
			import com.kaltura.vo.MediaMetaDataVO;
			import com.kaltura.contributionWizard.model.importTypesConfiguration.tagging.TaggingConfig;
			import com.kaltura.contributionWizard.events.TaggingEvent;
			import com.adobe_cw.adobe.cairngorm.control.CairngormEventDispatcher;
			import mx.controls.Text;
			import com.kaltura.contributionWizard.view.resources.ResourceBundleNames;
			import com.kaltura.vo.importees.BaseImportVO;
			import mx.controls.Alert;

			[Bindable]
			public var taggingConfig:TaggingConfig;

			[Bindable]
			private var _isValid:Boolean;

			public function validateMetaData():void
			{
				var validateAllEvent:ValidateAllMetaDataEvent = new ValidateAllMetaDataEvent(ValidateAllMetaDataEvent.VALIDATE_ALL_META_DATA, titleValidator, tagsValidator);
				validateAllEvent.dispatch();
			}
			public function scrollToInvalidRenderer(importItemVo:BaseImportVO):void
			{
				var pos:int = ArrayCollection(dataProvider).source.indexOf(importItemVo);
				//There is an issue with the scrollToIndex when the current scroll position is above the desired scroll position, so the workaround is to scroll to the last item in the list first.
				scrollToIndex(ArrayCollection(dataProvider).length);
				scrollToIndex(pos);
			}

			public function titleChangedHandler(event:TaggingViewEvent):void
			{
				dispatchSetMediaMetaData(event.newMetaDataVo, event.oldMetaDataVo);
				//var importItemVo:BaseImportVO = BaseImportVO(event.target.data);
				//dispatchValidateTitle(importItemVo);
			}

			public function tagsChangedHandler(event:TaggingViewEvent):void
			{
				dispatchSetMediaMetaData(event.newMetaDataVo, event.oldMetaDataVo);
				//var importItemVo:BaseImportVO = BaseImportVO(event.target.data);
				//dispatchValidateTags(importItemVo);
			}
			public function categoryChangedHandler(event:TaggingViewEvent):void
			{
				dispatchSetMediaMetaData(event.newMetaDataVo, event.oldMetaDataVo);
			}
			public function descriptionChangedHandler(event:TaggingViewEvent):void
			{
				dispatchSetMediaMetaData(event.newMetaDataVo, event.oldMetaDataVo);
			}
			public function additionalChangedHandler(event:TaggingViewEvent):void
			{
				dispatchSetMediaMetaData(event.newMetaDataVo, event.oldMetaDataVo);
			}

			private function dispatchSetMediaMetaData(newMetaData:MediaMetaDataVO, oldMetaData:MediaMetaDataVO):void
			{
				var evtTagging:TaggingEvent = new TaggingEvent(TaggingEvent.SET_MEDIA_META_DATA, newMetaData, oldMetaData);
				CairngormEventDispatcher.getInstance().dispatchEvent(evtTagging);
			}

			private function dispatchValidateTitle(importVo:BaseImportVO):void
			{
				var event:ValidateMetaDataEvent = new ValidateMetaDataEvent(ValidateMetaDataEvent.VALIDATE_TITLE, importVo, titleValidator, tagsValidator);
				event.dispatch();
			}

			private function dispatchValidateTags(importVo:BaseImportVO):void
			{
				var event:ValidateMetaDataEvent = new ValidateMetaDataEvent(ValidateMetaDataEvent.VALIDATE_TAGS, importVo, titleValidator, tagsValidator);
				event.dispatch();
			}
			
		]]>
	</mx:Script>

	<mx:itemRenderer>
		<mx:Component>
			<tagging:TaggingRenderer
				titleChanged="outerDocument.titleChangedHandler(event)"
				tagsChanged="outerDocument.tagsChangedHandler(event)"
				categoryChanged="outerDocument.categoryChangedHandler(event)"
				descriptionChanged="outerDocument.descriptionChangedHandler(event)"
				additionalChanged="outerDocument.additionalChangedHandler(event)" />
		</mx:Component>
	</mx:itemRenderer>

	<mx:StringValidator id="titleValidator" minLength="{taggingConfig.minTitleLen}" maxLength="{taggingConfig.maxTitleLen}" required="{taggingConfig.minTitleLen > 0}"/>
	<mx:StringValidator id="tagsValidator"	minLength="{taggingConfig.minTagsLen}" 	maxLength="{taggingConfig.maxTagsLen}" 	required="{taggingConfig.minTagsLen > 0}" />
</mx:List>