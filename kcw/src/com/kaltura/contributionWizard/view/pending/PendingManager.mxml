<?xml version="1.0" encoding="utf-8"?>
<!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<mx:UIComponent
		creationComplete="creationCompleteHandler()"
		xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns:ac="com.adobe.ac.*"
		xmlns:pending="com.kaltura.contributionWizard.view.pending.*"
			>
	<mx:Script>
		<![CDATA[
			import mx.events.PropertyChangeEvent;
			import mx.binding.utils.ChangeWatcher;
			import mx.managers.SystemManager;
			import com.kaltura.contributionWizard.events.PendingActionEvent;
			import com.adobe_cw.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.kaltura.contributionWizard.view.events.CancelPendingActionViewEvent;
			import mx.core.IFlexDisplayObject;
			import mx.core.Application;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import com.kaltura.contributionWizard.model.WizardModelLocator;
			[Bindable]
			private var _model:WizardModelLocator = WizardModelLocator.getInstance();

			private var _pendingWindow:PendingWindow = new PendingWindow();

			private function creationCompleteHandler():void
			{
				_pendingWindow.addEventListener(CancelPendingActionViewEvent.CANCEL_PENDING_ACTION, cancelPendingActionHandler);
				this.addEventListener(Event.ADDED_TO_STAGE, thisAddedToStageHandler);
			}

			private function thisAddedToStageHandler(addedToStageEvent:Event):void
			{
				if (_model.pendingActions.isPending)
				{
					onImportPending();
				}
				else
				{
					onImportNotPending();
				}
			}

			private function onImportPending():void
			{
				if (!stage) return;

				var isCancelable:Boolean = _model.pendingActions.serviceCanceler != null;
				_pendingWindow.cancelable = isCancelable;
				//ensures that the popup ius added to this swf root. This might be useful in case that this swf is loaded in a hacky way to another swf's ApplicationDomain.currentDomain
				PopUpManager.addPopUp(_pendingWindow, (this.root as SystemManager).application as DisplayObject, true);
				PopUpManager.centerPopUp(_pendingWindow);
			}

			private function onImportNotPending():void
			{
				if (!stage) return;
				PopUpManager.removePopUp(_pendingWindow);
			}

			private function cancelPendingActionHandler(evtCancelPendingAction:CancelPendingActionViewEvent):void
			{
				var event:PendingActionEvent = new PendingActionEvent(PendingActionEvent.CANCEL_PENDING_ACTION);
				CairngormEventDispatcher.getInstance().dispatchEvent(event);
				closePendingWindow();
			}

			private function closePendingWindow():void
			{
				PopUpManager.removePopUp(_pendingWindow);
			}
		]]>
	</mx:Script>
	<ac:ObserveValue source="{_model.pendingActions.isPending}" value="{true}" 	handler="{onImportPending}" />
	<ac:ObserveValue source="{_model.pendingActions.isPending}" value="{false}" handler="{onImportNotPending}" />
</mx:UIComponent>
